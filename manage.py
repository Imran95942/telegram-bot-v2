#!/usr/bin/python
# -*- coding: utf8 -*-

""" –†–∞–±–æ—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞, —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ """

from telebot import types
import telebot
from telebot import apihelper

from urllib3.connectionpool import InsecureRequestWarning

import warnings

from config import token2
from config import app
from config import id_s

from plugins.error import *

try:
    ###############################################
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–Ω–∏–Ω–≥–æ–≤
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    warnings.filterwarnings("ignore", category=InsecureRequestWarning)
    ##############################################

    keyboard = types.InlineKeyboardMarkup()
    keyboard_delete = types.InlineKeyboardButton(text="‚ùå",
                                                 callback_data="delete")
    keyboard.add(keyboard_delete)

    print(open("banner", "r").read())  # –ë–∞–Ω–Ω–µ—Ä

    token = token2
    bot = telebot.TeleBot(token, threaded=True)


    def restart_(m, autorestart: bool = False):
        """ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ """
        try:
            if autorestart is True:  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
                app.restart()
            else:

                if (m.from_user.id in id_s) is False:
                    bot.delete_message(m.chat.id, m.message_id)

                    bot.send_message(m.chat.id, 
                        """
                        *–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:*
                        \n 1. Opelsin
                        \n 2. No such file or directory [–ê–ü–ê–°–ù–ê–Ø –ö–ê–¢–Ø–†–ê]
                        \n 3. 7F673F4B1Aüï∑
                        \n 4. Evil Cat –ß–µ–∫ –ü—Ä–æ—Ñ–∏–ª—å
                        \n 5. recursive_cat
                        """, reply_markup=keyboard, parse_mode="Markdown")

                else:
                    try:
                        app.restart()
                        bot.send_message(905933085,
                                         "*–í—Å–µ –±–æ—Ç—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã —á–µ—Ä–µ–∑ 5"
                                         "—Å–µ–∫—É–Ω–¥!*", 
                                         parse_mode="Markdown")
                    except:
                        Error(m, bot).error()
        except (Exception, apihelper.ApiTelegramException) as e:
            print("manage.py | restart_ ", end="")
            print(f"‚ùå‚ùå‚ùå‚ùå‚ùå{e} ‚ùå‚ùå‚ùå‚ùå‚ùå")

    def autorestart__(m):
        """ –ê–≤—Ç–æ—Ä–µ—Å—Ç–∞—Ä—Ç """
        try:
            logs = (app.get_log(lines=20)).split("\n")
            bools = ["Process exited with status 0" in str(line)
                     for line in logs]

            bools_2 = ["Traceback (most recent call last):" in str(line)
                       for line in logs]

            bools_3 = ["line" in str(line)
                       for line in logs]

            if True in bools or True in bools_2 or True in bools_3:
                print("‚ùå‚ùå‚ùå‚ùå‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é... ‚ùå‚ùå‚ùå‚ùå‚ùå")
                restart_(m, autorestart=True)
        except (Exception, apihelper.ApiTelegramException) as e:
            print("manage.py | autorestart__ ", end="")
            print(f"‚ùå‚ùå‚ùå‚ùå‚ùå{e} ‚ùå‚ùå‚ùå‚ùå‚ùå")

    @bot.message_handler(commands=["restart"])
    def restart(m):
        restart_(m)

    @bot.message_handler(func=lambda message: True, content_types=["text", "sticker", "photo", "audio", "video", "document"])
    def autorestart(m):
        autorestart__(m)




    bot.polling()
except (Exception, apihelper.ApiTelegramException) as e:
   print (e)
